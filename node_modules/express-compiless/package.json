{
  "name": "express-compiless",
  "version": "0.1.3",
  "description": "Express middleware that compiles less files to css on the way out.",
  "main": "lib/compiless.js",
  "scripts": {
    "test": "mocha",
    "prepublish": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/papandreou/express-compiless"
  },
  "keywords": [
    "less",
    "css",
    "express",
    "compiler",
    "middleware"
  ],
  "author": {
    "name": "Andreas Lind Petersen",
    "email": "andreas@one.com"
  },
  "license": "BSD",
  "dependencies": {
    "bufferjs": "=1.1.0",
    "express-hijackresponse": "=0.1.2",
    "less": "=1.3.3",
    "passerror": "=0.0.1",
    "seq": "=0.3.5",
    "underscore": "=1.4.2"
  },
  "devDependencies": {
    "expect.js": "=0.1.2",
    "express": "=2.5.11",
    "mocha": "=1.8.1",
    "request": "=2.11.4"
  },
  "readme": "express-compiless\n=================\n\nMiddleware that compiles less to css on-the-fly. Intended to be used\nin a development setting with the `connect.static` middleware, but\nshould work with any middleware further down the stack, even an http\nproxy.\n\nThe response will be rewritten under these circumstances:\n\n* If the response is served with a `Content-Type` of `text/less`.\n* If the request url ends in `.less` (excluding GET parameters) and\n  the `Content-Type` is `application/octet-stream` (this is what\n  <a href=\"https://senchalabs/connect/\">Connect</a>'s `static`\n  middleware does.\n\nCompiless plays nice with conditional GET. If the original response\nhas an ETag, compiless will add to it so the ETag of the compiled\nresponse never clashes with the original ETag. That prevents the\nmiddleware issuing the original response from being confused into\nsending a false positive `304 Not Modified` if compiless is turned\noff or removed from the stack later.\n\n\nInstallation\n------------\n\nMake sure you have node.js and npm installed, then run:\n\n    npm install express-compiless\n\nExample usage\n-------------\n\n```javascript\nvar express = require('express'),\n    compiless = require('express-compiless'),\n    root = '/path/to/my/static/files';\n\nexpress.createServer()\n    .use(compiless({root: root}))\n    .use(express.static(root))\n    .listen(1337);\n```\n\nLicense\n-------\n\n3-clause BSD license -- see the `LICENSE` file for details.\n",
  "readmeFilename": "README.md",
  "_id": "express-compiless@0.1.3",
  "dist": {
    "shasum": "a59060892465e97706b9b7324ee867e49739adbe"
  },
  "_from": "express-compiless@",
  "_resolved": "https://registry.npmjs.org/express-compiless/-/express-compiless-0.1.3.tgz"
}
